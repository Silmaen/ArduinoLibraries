/**
 * \author argawaen
 * \date 20/01/2021
 *
 */
#pragma once

namespace astd {

    struct __true_type {};
    struct __false_type {};

    template<class I>
    class __is_integer {
    public:
        typedef __false_type value;
    };

    template<>
    class __is_integer<unsigned int> {
    public:
        typedef __true_type value;
    };

    template<>
    class __is_integer<signed int> {
    public:
        typedef __true_type value;
    };

    template<>
    class __is_integer<short unsigned int> {
    public:
        typedef __true_type value;
    };

    template<>
    class __is_integer<short signed int> {
    public:
        typedef __true_type value;
    };

    template<>
    class __is_integer<char> {
    public:
        typedef __true_type value;
    };

    template<>
    class __is_integer<signed char> {
    public:
        typedef __true_type value;
    };

    template<>
    class __is_integer<unsigned char> {
    public:
        typedef __true_type value;
    };

    template<>
    class __is_integer<long unsigned int> {
    public:
        typedef __true_type value;
    };

    template<>
    class __is_integer<long signed int> {
    public:
        typedef __true_type value;
    };

} // namespace astd
