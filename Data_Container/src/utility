/**
 * \author argawaen
 * \date 20/01/2021
 *
 */

#pragma once

namespace astd {

    namespace rel_ops {
        template<class T>
        inline bool operator!=(const T &x, const T &y) {
            return !(x == y);
        }

        template<class T>
        inline bool operator>(const T &x, const T &y) {
            return (y < x);
        }

        template<class T>
        inline bool operator<=(const T &x, const T &y) {
            return !(y < x);
        }

        template<class T>
        inline bool operator>=(const T &x, const T &y) {
            return !(x < y);
        }
    } // namespace rel_ops

    template<class T1, class T2>
    struct pair {
        using first_type = T1 ;
        using second_type = T2 ;

        T1 first;
        T2 second;
        pair() : first(), second() {}
        pair(const first_type &x, const second_type &y) : first(x), second(y) {}
        template<class U, class V>
        pair(const pair<U, V> &p) : first(p.first), second(p.second) {}
    };

    template<class T1, class T2>
    bool operator==(const pair<T1, T2> &x, const pair<T1, T2> &y) {
        using namespace rel_ops;
        return (x.first == y.first && x.second == y.second);
    }
    template<class T1, class T2>
    bool operator<(const pair<T1, T2> &x, const pair<T1, T2> &y) {
        return x.first < y.first || (!(y.first < x.first) && x.second < y.second);
    }
    template<class T1, class T2>
    bool operator!=(const pair<T1, T2> &x, const pair<T1, T2> &y) {
        return !(x == y);
    }
    template<class T1, class T2>
    bool operator>(const pair<T1, T2> &x, const pair<T1, T2> &y) {
        return y < x;
    }
    template<class T1, class T2>
    bool operator>=(const pair<T1, T2> &x, const pair<T1, T2> &y) {
        return !(x < y);
    }
    template<class T1, class T2>
    bool operator<=(const pair<T1, T2> &x, const pair<T1, T2> &y) {
        return !(y < x);
    }
    template<class T1, class T2>
    pair<T1, T2> make_pair(const T1 &x, const T2 &y) {
        return pair<T1, T2>(x, y);
    }

} // namespace astd

