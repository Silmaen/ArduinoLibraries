cmake_minimum_required(VERSION 3.8.2)

# -------------------------------------------------------------------------------------------------------------------
#    MANUAL PART
#  - EXT_LIB_NEEDED the Arduino libraries that need to be includes
#  - INT_LIB_NEEDED le libraries inside this repository to add to the project
# -------------------------------------------------------------------------------------------------------------------
set(EXT_LIB_NEEDED core Wire)
set(INT_LIB_NEEDED Utilities_BusIO Data_LinearAlgebra Driver_10dof Driver_ESC Driver_PM06)

# -------------------------------------------------------------------------------------------------------------------
#    AUTOMATED PART
# -------------------------------------------------------------------------------------------------------------------
get_filename_component(LIB_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
file(GLOB_RECURSE SRCS *.cpp)
file(GLOB_RECURSE HDRS *.h *.hpp)

if ("${SRCS}" STREQUAL "")
    message(STATUS "adding library ${LIB_NAME} INTERFACE")
    add_library(${LIB_NAME} INTERFACE)
    set(scope INTERFACE)
    set(self_scope INTERFACE)
else ()
    message(STATUS "adding library ${LIB_NAME} with sources")
    add_library(${LIB_NAME} ${SRCS} ${HDRS})
    set(scope PRIVATE)
    set(self_scope PUBLIC)
endif ()

add_dependencies(All_lib_only ${LIB_NAME})
target_include_directories(${LIB_NAME}
        ${self_scope}
        "${CMAKE_CURRENT_SOURCE_DIR}/src"
        )

if (ARDUINO)
    target_link_arduino_libraries(${LIB_NAME}
            ${scope}
            ${EXT_LIB_NEEDED}
            )
    target_link_libraries(${LIB_NAME}
            ${scope}
            ${INT_LIB_NEEDED}
            )
else ()
    # For other platforms standard library is linked by default
endif ()

file(GLOB EXAMPLES examples/*)
foreach (ex ${EXAMPLES})
    get_filename_component(ex_name ${ex} NAME)
    message(STATUS "adding library example ${ex_name}")
    set(EXAMPLE_PROJECT_NAME ${LIB_NAME}_Example_${ex_name})
    set(INO_CPP ${CMAKE_CURRENT_BINARY_DIR}/${EXAMPLE_PROJECT_NAME}/${ex_name}.ino.cpp)
    #project(${EXAMPLE_PROJECT_NAME} CXX)
    add_executable(${EXAMPLE_PROJECT_NAME} ${INO_CPP} ${ex}/${ex_name}.ino)
    add_custom_command(
            OUTPUT ${INO_CPP}
            DEPENDS ${ex}/${ex_name}.ino
            COMMAND ${CMAKE_COMMAND} -E copy ${ex}/${ex_name}.ino ${INO_CPP}
    )
    target_include_directories(${EXAMPLE_PROJECT_NAME} PUBLIC ${ex})
    target_link_arduino_libraries(${EXAMPLE_PROJECT_NAME} PRIVATE ${EXT_LIB_NEEDED})
    target_link_libraries(${EXAMPLE_PROJECT_NAME} PRIVATE ${LIB_NAME} ${INT_LIB_NEEDED})
    add_dependencies(All_examples ${EXAMPLE_PROJECT_NAME})
endforeach ()
